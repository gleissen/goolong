(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-sort IntMap () (Array Elt Elt))
(define-fun set_emp () Set ((as const Set) false))
(define-fun set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun set_add ((s Set) (x Elt)) Set  (store s x true))
(define-fun set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun set_com ((s Set)) Set ((_ map not) s))
(define-fun set_dif ((s1 Set) (s2 Set)) Set (set_cap s1 (set_com s2)))
(define-fun set_sub ((s1 Set) (s2 Set)) Bool (= set_emp (set_dif s1 s2)))
(define-fun set_minus ((s1 Set) (x Elt)) Set (set_dif s1 (set_add set_emp x)))
(declare-fun set_size (Set) Int)
(declare-const success!1 (Array Int Int))
(declare-const w (Array Int Int))
(declare-const w!1 (Array Int Int))
(declare-const success (Array Int Int))
(declare-const x!1 (Array Int Int))
(declare-const l (Array Int Int))
(declare-const m (Array Int Int))
(declare-const pt!1 (Array Int Int))
(declare-const pt (Array Int Int))
(declare-const id (Array Int Int))
(declare-const k (Array Int Int))
(declare-const k!1 (Array Int Int))
(declare-const rsuccess!1 (Array Int Int))
(declare-const l!1 (Array Int Int))
(declare-const wT!1 (Array Int Int))
(declare-const max!1 (Array Int Int))
(declare-const rsuccess (Array Int Int))
(declare-const rw (Array Int Int))
(declare-const px (Array Int Int))
(declare-const msgType!1 (Array Int Int))
(declare-const a0 Int)
(declare-const id!1 (Array Int Int))
(declare-const decided!1 (Array Int Int))
(declare-const ps Set)
(declare-const max (Array Int Int))
(declare-const t (Array Int Int))
(declare-const ready!1 (Array Int Int))
(declare-const xT!1 (Array Int Int))
(declare-const rwT (Array Int Int))
(declare-const msgType (Array Int Int))
(declare-const xT (Array Int Int))
(declare-const pID (Array Int Int))
(declare-const ho (Array Int Int))
(declare-const C Int)
(declare-const wT (Array Int Int))
(declare-const rw!1 (Array Int Int))
(declare-const x (Array Int Int))
(declare-const as Set)
(declare-const pID!1 (Array Int Int))
(declare-const ready (Array Int Int))
(declare-const px!1 (Array Int Int))
(declare-const rwT!1 (Array Int Int))
(declare-const ho!1 (Array Int Int))
(declare-const decided (Array Int Int))
(declare-const pc!ps (Array Int Int))
(assert (not (and (forall ((A Int)
                           (r Set)
                           (xT (Array Int Int))
                           (ho (Array Int Int))
                           (ready (Array Int Int))
                           (decided (Array Int Int)))
                   (=> (forall ((i Int))
                        (=> (set_mem i ps)
                            (and (> (select t i) 0)
                                 (= (select ready i) 0)
                                 (= (select decided i) 0)
                                 (= (select ho i) 0)
                                 (= (select k i) 0)
                                 (= (select l i) (set_size as))
                                 (= (select m i) 0))))
                       (and (forall ((B Int)
                                     (r Set)
                                     (max (Array Int Int))
                                     (wT (Array Int Int)))
                             (=> (forall ((i Int))
                                  (=> (set_mem i as)
                                      (= (select wT i) 0)))
                                 (and 
                                      (forall ((A!0 Int)
                                               (pc!ps (Array Int Int))
                                               (pcNext!ps (Array Int Int))
                                               (C Int)
                                               (id (Array Int Int))
                                               (msgType (Array Int Int))
                                               (pID (Array Int Int))
                                               (pt (Array Int Int))
                                               (px (Array Int Int))
                                               (success (Array Int Int))
                                               (max (Array Int Int))
                                               (wT (Array Int Int))
                                               (w (Array Int Int))
                                               (rwT (Array Int Int))
                                               (rw (Array Int Int))
                                               (rsuccess (Array Int Int))
                                               (ho (Array Int Int))
                                               (xT (Array Int Int))
                                               (x (Array Int Int))
                                               (ready (Array Int Int))
                                               (k (Array Int Int))
                                               (l (Array Int Int))
                                               (A Int)
                                               (C Int))
                                       (=> (set_mem A!0 ps)
                                           (and 
                                                (=> (and (forall ((A Int))
                                                          (and (=> (and (set_mem A ps)
                                                                        (= (select pc!ps A) 0))
                                                                   (forall ((i Int))
                                                                    (=> (and (set_mem i ps)
                                                                             (= (select pc!ps i) 0))
                                                                        (and (= (select ready i) 0)
                                                                             (= (select decided i) 0)
                                                                             (= (select k i) 0)
                                                                             (= (+ (+ (select k i) (select l i)) (select m i)) (set_size as))))))
                                                               (=> (and (set_mem A ps)
                                                                        (= (select pc!ps A) 1))
                                                                   (or
                                                                    (and (forall ((i Int))
                                                                          (=> (and (set_mem i ps)
                                                                                   (= (select decided i) 1))
                                                                              (and (> (select k i) (/ (set_size as) 2))
                                                                                   (> (select ho i) (/ (set_size as) 2))
                                                                                   (= (select ready i) 1))))
                                                                         (forall ((i Int))
                                                                          (=> (and (set_mem i ps)
                                                                                   (= (select pc!ps i) 2))
                                                                              (and (= (select decided i) 0)
                                                                                   (= (select k i) 0))))
                                                                         (forall ((i Int))
                                                                          (=> (and (set_mem i ps)
                                                                                   (= (select pc!ps i) 2))
                                                                              (= (+ (+ (select k i) (select l i)) (select m i)) (set_size as)))))
                                                                    (forall ((i Int))
                                                                     (=> (and (set_mem i ps)
                                                                              (= (select pc!ps i) 1))
                                                                         (and (= (select ready i) 1)
                                                                              (= (select decided i) 0))))))
                                                               (=> (and (set_mem A ps)
                                                                        (= (select pc!ps A) 2))
                                                                   (forall ((i Int))
                                                                    (=> (and (set_mem i ps)
                                                                             (= (select pc!ps i) 0))
                                                                        (and (= (select ready i) 0)
                                                                             (= (select decided i) 0)
                                                                             (= (select k i) 0)
                                                                             (= (+ (+ (select k i) (select l i)) (select m i)) (set_size as))))))
                                                               (=> (and (set_mem A ps)
                                                                        (= (select pc!ps A) 3))
                                                                   (forall ((i Int))
                                                                    (=> (and (set_mem i ps)
                                                                             (= (select pc!ps i) 0))
                                                                        (and (= (select ready i) 0)
                                                                             (= (select decided i) 0)
                                                                             (= (select k i) 0)
                                                                             (= (+ (+ (select k i) (select l i)) (select m i)) (set_size as))))))))
                                                         (and (= (select pc!ps A!0) 2)
                                                              (= pcNext!ps (store pc!ps A!0 1)))
                                                         (set_mem A!0 ps)
                                                         (set_mem A ps)
                                                         (> (* 2 (select ho A)) (set_size as)))
                                                    (=> (= ho!1 (store ho A!0 0))
                                                        (=> (= ready!1 (store ready A!0 1))
                                                            (and (= (+ (+ (select k A!0) (select l A!0)) (select m A!0)) (set_size as))
                                                                 ))))
                                                ))))))))))))
(check-sat)
